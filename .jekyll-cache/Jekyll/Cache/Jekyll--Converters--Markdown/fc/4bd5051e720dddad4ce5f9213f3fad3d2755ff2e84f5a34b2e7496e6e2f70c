I"ß<h1 id="cities-and-buildings">Cities And Buildings</h1>
<p>Web Application for Architects, Engineers, and All Other Building-Fanatics.</p>

<p><a href="https://citiesandbuildings.herokuapp.com">citiesandbuildings.herokuapp.com</a></p>

<p><img src="../img/posts/CAB_image.png" alt="home" /></p>

<h2 id="functionalities">Functionalities</h2>
<ol>
  <li>Explore Buildings around the World
    <ul>
      <li>Check out brief information on the buildings of your interest</li>
      <li>Add fun facts to buildings!</li>
    </ul>
  </li>
  <li>Register As a User to Add More
    <ul>
      <li>Once registered, you can add more buildings and edit / delete them</li>
    </ul>
  </li>
  <li>Filter Buildings per Various Criteria
    <ul>
      <li>Filter by building name, <em>(to be completed from here)</em>height, architect, and engineer.</li>
    </ul>
  </li>
</ol>

<h2 id="tech-stack">Tech Stack</h2>
<p><img src="../img/CAB_tech_stack.png" alt="tech_stack" /></p>

<h4 id="frontend">Frontend</h4>
<ul>
  <li>Built on HTML, CSS, and JavaScript</li>
  <li>Bootstrap was used as a CSS framework to apply further styling and responsiveness to the app.</li>
</ul>

<h4 id="backend">Backend</h4>
<ul>
  <li>Implemented RESTful Routes</li>
  <li>Express web framework was used to set up a server</li>
  <li>Express on Node.js was chosen to use JavaScript only for both frontend and backend sides</li>
  <li>MongoDB was used as a database based on
    <ul>
      <li>its well-known compatibility with Node and Express (ex. MERN / MEAN Stack, except that this project did not use neither R(React) or A(Angular))</li>
      <li>intention to practice the use of NoSQL database.</li>
    </ul>
  </li>
  <li>Miscellaneous Settings
    <ul>
      <li><em>EJS</em> as a templating language, as it uses JS syntax</li>
      <li><em>Axios</em> to handle HTTP requests based on promises</li>
      <li><em>express-session</em> to introduce sessions</li>
      <li><em>passport</em> to easily manage authentication (w/ hashed password) and authorization</li>
      <li><em>Mongoose</em> and <em>JOI</em> to manage schema of and add validation to data</li>
      <li><em>express-mongo-sanitize</em> to prevent Mongo Injection on top of Express-built-in and custom middlewares / classes</li>
      <li><em>sanitize-html</em> to prevent XSS along with JOI</li>
      <li><em>helmet</em> to strengthen security of the web, by setting several headers to prevent well-known security attacks</li>
      <li><em>flash</em> to display alert messages</li>
      <li><em>cloudinary</em> to successfully store images and further modify them</li>
      <li><em>multer</em> to parse multipart form for file uploads</li>
      <li><em>mapbox</em> to show maps with geocoded locations of buildings</li>
    </ul>
  </li>
</ul>

<h4 id="deployment">Deployment</h4>
<ul>
  <li>App deployed on <em>heroku</em></li>
  <li>Heroku was chosen for a relatively easy upload, considering it provides PaaS (Platform as a Service) and handles infrastructure operations.</li>
</ul>
:ET